--TEST--
PHP 7.1 test.
--RULESET--
{
    "@Symfony": true
}
--SETTINGS--
{"checkPriority": false}
--REQUIREMENTS--
{"php": 7.1}
--EXPECT--
<?php

function iterable_foo(iterable $foo)
{
    try {
        $str = 'abcdef';
        echo $str[-2];
    } catch (ExceptionType1 | ExceptionType2 $e) {
        // Code to handle the exception
    } catch (\Exception $e) {
        // ...
    }
}

class A
{
    public const b = 1;
}

interface Contract
{
    public function method(?Foo $foo): bool;
}

class Implementation implements Contract
{
    public function method(?Foo $foo = null): bool
    {
        return is_null($foo);
    }
}

list(list('x' => $x1, 'y' => $y1), list('x' => $x2, 'y' => $y2)) = $points;
list('first' => list($x1, $y1), 'second' => list($x2, $y2)) = $points;

--INPUT--
<?php

function iterable_foo(iterable$foo) {try{$str='abcdef'; echo $str[ -2  ];    } catch (ExceptionType1 | ExceptionType2 $e) {
        // Code to handle the exception
    } catch (\Exception $e) {
        // ...
    }}

class A
{
        PUBLIC CONST b = 1;
}

interface Contract {
    public function method(?Foo $foo): bool;
}

class Implementation implements Contract {
    public function method(?Foo $foo = null): bool
    {
        return is_null($foo);
    }
}

list(list("x" => $x1, "y" => $y1), list("x" => $x2, "y" => $y2)) = $points;
list("first" => list($x1, $y1), "second" => list($x2, $y2)) = $points;
