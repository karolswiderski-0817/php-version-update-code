--TEST--
PHP 7.3 test.
--RULESET--
{
    "@PHP71Migration": true,
    "@PHP71Migration:risky": true,
    "@Symfony": true,
    "@Symfony:risky": true,
    "list_syntax": {"syntax": "short"},
    "mb_str_functions": true,
    "multiline_whitespace_before_semicolons": true,
    "native_function_invocation": {"include": ["get_class"]},
    "php_unit_test_case_static_method_calls": {"call_type": "this"},
    "silenced_deprecation_error": true,
    "strict_param": true
}
--REQUIREMENTS--
{"php": 70300}
--EXPECT--
<?php

declare(strict_types=1);

function foo($a = true): void // In PHP 8.0: true, false and null are converted from special-cased constants into reserved keywords.
{
}

$firstKey = array_key_first($items);
$lastKey = array_key_last($items);
is_countable($foo);

// https://wiki.php.net/rfc/list_reference_assignment
[$a, &$b] = $array; // `list_syntax` rule

// https://wiki.php.net/rfc/trailing-comma-function-calls Trailing commas in function and method calls are now allowed.
foo(
    $arg,
    $arg2,
);
__DIR__; // `dir_constant` rule
null === $var; // `is_null` rule
mb_strpos($a, $b, ); // `mb_str_functions` rule
sample('foo', 'foobarbaz', 'baz', ); // `method_argument_space` rule
mb_strlen($str, ); // `native_function_casing` rule
$c = \get_class($d, ); // `native_function_invocation` rule
$a = rtrim($b, ); // `no_alias_functions` rule
$foo->bar($arg1, $arg2, ); // `no_spaces_inside_parenthesis` rule
$this->assertTrue($a, ); // `php_unit_construct` rule
final class MyTest extends \PHPUnit_Framework_TestCase
{
    public function testFoo(): void
    {
        $this->assertSame(1, 2, ); // `php_unit_test_case_static_method_calls` rule
    }
}
random_int($a, $b, ); // `random_api_migration` rule
$foo = (int) $foo; // `set_type_to_cast` rule
in_array($b, $c, true, ); // `strict_param` rule
foo(null === $a, ); // `yoda_style` rule

--INPUT--
<?php

function foo($a = TRUE) // In PHP 8.0: true, false and null are converted from special-cased constants into reserved keywords.
{
}

$firstKey = ARRAY_KEY_FIRST($items);
$lastKey = ARRAY_Key_last($items);
IS_COUNTABLE($foo);

// https://wiki.php.net/rfc/list_reference_assignment
list($a, &$b) = $array; // `list_syntax` rule

// https://wiki.php.net/rfc/trailing-comma-function-calls Trailing commas in function and method calls are now allowed.
foo(
    $arg,
    $arg2,
);
dirname(__FILE__, ); // `dir_constant` rule
is_null($var, ); // `is_null` rule
strpos($a, $b, ); // `mb_str_functions` rule
sample('foo',    'foobarbaz', 'baz'   , ); // `method_argument_space` rule
STRLEN($str, ); // `native_function_casing` rule
$c = get_class($d, ); // `native_function_invocation` rule
$a = chop($b, ); // `no_alias_functions` rule
$foo->bar(  $arg1, $arg2,   );// `no_spaces_inside_parenthesis` rule
$this->assertSame(true, $a, ); // `php_unit_construct` rule
final class MyTest extends \PHPUnit_Framework_TestCase
{
    public function testFoo(): void
    {
        static::assertSame(1, 2, ); // `php_unit_test_case_static_method_calls` rule
    }
}
rand($a, $b, ); // `random_api_migration` rule
settype($foo, "integer", ); // `set_type_to_cast` rule
in_array($b, $c, ); // `strict_param` rule
foo($a === null, ); // `yoda_style` rule
